CREATE TABLE PROFESSOR( 
 ID		INT			NOT NULL,
 first	VARCHAR(15),
 last	VARCHAR(15),
 PRIMARY KEY (ID)
 )CHARACTER SET utf8mb4
  COLLATE utf8mb4_unicode_ci;
  
  CREATE TABLE STUDENT (
  ID 		INT				NOT NULL,
  first		VARCHAR(25),
  last		VARCHAR(25),
  major		VARCHAR(20),
  PRIMARY KEY (ID)
  )CHARACTER SET utf8mb4
   COLLATE utf8mb4_unicode_ci;
   
  CREATE TABLE COURSE (
  catnum 		INT 			NOT NULL,
  description	VARCHAR(50)		NOT NULL,
  ge_area		VARCHAR(20),
  units			CHAR(1),
  PRIMARY KEY (catnum)
  )CHARACTER SET 'utf8mb4'
   COLLATE 'utf8mb4_unicode_ci';
  
   
  CREATE TABLE STUDENT_EMAIL (
  ID 		INT				NOT NULL,
  email		VARCHAR(30)		NOT NULL,
  PRIMARY KEY (ID, email),
  FOREIGN KEY (ID) REFERENCES STUDENT(ID)
  ON DELETE CASCADE
  ON UPDATE RESTRICT
  )CHARACTER SET 'utf8mb4'
   COLLATE 'utf8mb4_unicode_ci';
  
  CREATE TABLE PROF_EMAIL (
  ID 		INT				NOT NULL,
  email		VARCHAR(30)		NOT NULL,
  PRIMARY KEY (ID, email),
  FOREIGN KEY (ID) REFERENCES PROFESSOR(ID)
  ON DELETE CASCADE
  ON UPDATE RESTRICT
  )CHARACTER SET 'utf8mb4'
   COLLATE 'utf8mb4_unicode_ci';
  
  CREATE TABLE SECTION (
  catnum 	INT				NOT NULL,
  sectnum	INT				NOT NULL,
  semester	VARCHAR(15)		NOT NULL,
  room_num	VARCHAR(15),
  prof_ID	INT,
  PRIMARY KEY (sectnum, catnum, semester),
  FOREIGN KEY(catnum) REFERENCES COURSE(catnum),
  ON DELETE CASCADE
  ON UPDATE RESTRICT,
  FOREIGN KEY(prof_ID) REFERENCES PROFESSOR(ID)
  ON DELETE CASCADE
  ON UPDATE RESTRICT
  )CHARACTER SET 'utf8mb4'
   COLLATE 'utf8mb4_unicode_ci';
 
  CREATE TABLE ENROLLED (
  studentid 	INT			NOT NULL,
  catnum		INT			NOT NULL,
  sectnum		INT			NOT NULL,
  semester		VARCHAR(15)	NOT NULL,
  grade			CHAR(1),
  rating		VARCHAR(2),
  PRIMARY KEY (studentid, catnum, sectnum, semester),
  FOREIGN KEY (studentid) REFERENCES STUDENT(ID)
  ON DELETE CASCADE
  ON UPDATE RESTRICT,
  FOREIGN KEY (catnum, sectnum, semester) REFERENCES SECTION(catnum, sectnum, semester)
  ON DELETE CASCADE
  ON UPDATE RESTRICT
  )CHARACTER SET 'utf8mb4'
   COLLATE 'utf8mb4_unicode_ci';
   
  INSERT INTO PROFESSOR(ID, first, last)
  VALUES ('1234567', 'John', 'Smith');
  
  INSERT INTO STUDENT(ID, first, last, major)
  VALUES ('1122334', 'Trevor', 'Davis', 'Comp Sci');
  
  INSERT INTO STUDENT(ID, first, last, major)
  VALUES ('1234123', 'Mack', 'Wooten', 'Physics');
  
  INSERT INTO STUDENT(ID, first, last, major)
  VALUES ('7654123', 'Glen', 'Holland', 'Physics');
  
  INSERT INTO COURSE(catnum, description, ge_area, units)
  VALUES ('12345', 'history of computers', 'A', '5');
  
  INSERT INTO PROF_EMAIL(ID, email)
  VALUES ('1234567', 'Johnsmith@csus.edu');
  
  INSERT INTO STUDENT_EMAIL(ID, email)
  VALUES ('1122334', 'tdavis4@csus.edu');
  
  INSERT INTO SECTION(catnum, sectnum, semester, room_num, prof_ID)
  VALUES ('12345', '55554', 'FALL 2020', 'RVR1002', '1234567');
  
 INSERT INTO COURSE(catnum, description, ge_area, units)
  VALUES ('54321', 'history of math', 'A', '3');
  
  INSERT INTO SECTION(catnum, sectnum, semester, room_num, prof_ID)
  VALUES ('54321', '55554', 'Spring 2020', 'RVR1002', '1234567');
  
  INSERT INTO SECTION(catnum, sectnum, semester, room_num, prof_ID)
  VALUES ('54321', '55544', 'Spring 2020', 'RVR1002', '1234567');
  
  INSERT INTO ENROLLED (studentid, catnum, sectnum, semester, grade, rating)
  VALUES ('1122334', '54321', '55544', 'Spring 2020', 'B', '8'); 
  
  INSERT INTO ENROLLED (studentid, catnum, sectnum, semester, grade, rating)
  VALUES ('7654123', '54321', '55544', 'Spring 2020', 'C', '6');
  
  INSERT INTO ENROLLED (studentid, catnum, sectnum, semester, grade, rating)
  VALUES ('1234123', '54321', '55544', 'Spring 2020', 'C', '6');
  
  SELECT catnum, description
  FROM COURSE NATURAL JOIN SECTION
  WHERE room_num = 'RVR1002';
  
  SELECT catnum, sectnum, ID, first, last, description
  FROM COURSE NATURAL JOIN SECTION 
		JOIN PROFESSOR ON
	   ID = prof_ID
  WHERE semester = 'Spring 2020';
  
  SELECT ID, first, last, AVG(DISTINCT rating)
  From STUDENT LEFT OUTER JOIN ENROLLED ON
		ID = studentid
  GROUP BY ID;
  
  SELECT ID, first, last, AVG(DISTINCT rating)
  FROM SECTION NATURAL JOIN ENROLLED 
       JOIN PROFESSOR ON
       ID = prof_ID
  GROUP BY ID
  HAVING COUNT(*) > 2;
  
  SELECT ID, first, last
FROM STUDENT
WHERE NOT EXISTS (SELECT S.ID, S.email
                  FROM STUDENT_EMAIL AS S
                  WHERE ID = S.ID);
				  
SELECT ID, first, last
  
  
  DROP TABLE IF EXISTS ENROLLED;
  
  DROP TABLE IF EXISTS SECTION;
  
  DROP TABLE IF EXISTS PROF_EMAIL;
  
  DROP TABLE IF EXISTS STUDENT_EMAIL;
  
  DROP TABLE IF EXISTS COURSE;
  
  DROP TABLE IF EXISTS STUDENT;
  
  DROP TABLE IF EXISTS PROFESSOR;